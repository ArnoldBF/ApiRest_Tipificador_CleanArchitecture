// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApi.Infrastructure.Data;

#nullable disable

namespace MyApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428214726_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyApi.Domain.Entities.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CallId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripletId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TypificationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("TypificationTime")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripletId");

                    b.HasIndex("UserId");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ci")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.LevelOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LevelOnes");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.LevelThree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelTwoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelTwoId");

                    b.ToTable("LevelThrees");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.LevelTwo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelOneId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelOneId");

                    b.ToTable("LevelTwos");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.Triplet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LevelOneId")
                        .HasColumnType("int");

                    b.Property<int>("LevelThreeId")
                        .HasColumnType("int");

                    b.Property<int>("LevelTwoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelOneId");

                    b.HasIndex("LevelThreeId");

                    b.HasIndex("LevelTwoId");

                    b.ToTable("Triplets");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.Call", b =>
                {
                    b.HasOne("MyApi.Domain.Entities.Triplet", "Triplet")
                        .WithMany("Calls")
                        .HasForeignKey("TripletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApi.Domain.Entities.User", "User")
                        .WithMany("Calls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Triplet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.LevelThree", b =>
                {
                    b.HasOne("MyApi.Domain.Entities.LevelTwo", "LevelTwo")
                        .WithMany("LevelThrees")
                        .HasForeignKey("LevelTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelTwo");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.LevelTwo", b =>
                {
                    b.HasOne("MyApi.Domain.Entities.LevelOne", "LevelOne")
                        .WithMany("LevelTwos")
                        .HasForeignKey("LevelOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelOne");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.Triplet", b =>
                {
                    b.HasOne("MyApi.Domain.Entities.LevelOne", "LevelOne")
                        .WithMany()
                        .HasForeignKey("LevelOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyApi.Domain.Entities.LevelThree", "LevelThree")
                        .WithMany()
                        .HasForeignKey("LevelThreeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyApi.Domain.Entities.LevelTwo", "LevelTwo")
                        .WithMany()
                        .HasForeignKey("LevelTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LevelOne");

                    b.Navigation("LevelThree");

                    b.Navigation("LevelTwo");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.User", b =>
                {
                    b.HasOne("MyApi.Domain.Entities.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("MyApi.Domain.Entities.User", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.Employee", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.LevelOne", b =>
                {
                    b.Navigation("LevelTwos");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.LevelTwo", b =>
                {
                    b.Navigation("LevelThrees");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.Triplet", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.User", b =>
                {
                    b.Navigation("Calls");
                });
#pragma warning restore 612, 618
        }
    }
}
